{"ast":null,"code":"import { takeEvery } from 'redux-saga/effects';\nimport ShopActionTypes from './shop.types';\nexport function* fetchCollectionsAsync() {\n  const collectionRef = firestore.collection('collections');\n  dispatch(fetchCollectionsStart());\n  collectionRef.get().then(snapshot => {\n    const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n    dispatch(fetchCollectionsSuccess(collectionsMap));\n    this.setState({\n      loading: false\n    });\n  }).catch(error => dispatch(fetchCollectionsFailure(error.message)));\n}\nexport function* fetchCollectionsStart() {\n  yield takeEvery(ShopActionTypes.FETCH_COLLECTION_START, fetchCollectionsAsync);\n}","map":{"version":3,"sources":["D:/React_by_ZTM/e-com/new2/shops/src/redux/shop/shop.sagas.js"],"names":["takeEvery","ShopActionTypes","fetchCollectionsAsync","collectionRef","firestore","collection","dispatch","fetchCollectionsStart","get","then","snapshot","collectionsMap","convertCollectionsSnapshotToMap","fetchCollectionsSuccess","setState","loading","catch","error","fetchCollectionsFailure","message","FETCH_COLLECTION_START"],"mappings":"AAAA,SAASA,SAAT,QAA0B,oBAA1B;AACA,OAAOC,eAAP,MAA4B,cAA5B;AAEA,OAAO,UAAUC,qBAAV,GAAkC;AAErC,QAAMC,aAAa,GAAGC,SAAS,CAACC,UAAV,CAAqB,aAArB,CAAtB;AACIC,EAAAA,QAAQ,CAACC,qBAAqB,EAAtB,CAAR;AAEAJ,EAAAA,aAAa,CAACK,GAAd,GAAoBC,IAApB,CAAyBC,QAAQ,IAAI;AACjC,UAAMC,cAAc,GAAGC,+BAA+B,CAACF,QAAD,CAAtD;AACAJ,IAAAA,QAAQ,CAACO,uBAAuB,CAACF,cAAD,CAAxB,CAAR;AACA,SAAKG,QAAL,CAAc;AAACC,MAAAA,OAAO,EAAE;AAAV,KAAd;AACH,GAJD,EAIGC,KAJH,CAISC,KAAK,IAAEX,QAAQ,CAACY,uBAAuB,CAACD,KAAK,CAACE,OAAP,CAAxB,CAJxB;AAMP;AAED,OAAO,UAAUZ,qBAAV,GAAkC;AACrC,QAAMP,SAAS,CACXC,eAAe,CAACmB,sBADL,EAEXlB,qBAFW,CAAf;AAIH","sourcesContent":["import { takeEvery } from 'redux-saga/effects';\r\nimport ShopActionTypes from './shop.types';\r\n\r\nexport function* fetchCollectionsAsync() {\r\n    \r\n    const collectionRef = firestore.collection('collections');\r\n        dispatch(fetchCollectionsStart());\r\n        \r\n        collectionRef.get().then(snapshot => {\r\n            const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\r\n            dispatch(fetchCollectionsSuccess(collectionsMap))\r\n            this.setState({loading: false})\r\n        }).catch(error=>dispatch(fetchCollectionsFailure(error.message)))\r\n\r\n}\r\n\r\nexport function* fetchCollectionsStart() {\r\n    yield takeEvery(\r\n        ShopActionTypes.FETCH_COLLECTION_START, \r\n        fetchCollectionsAsync \r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}